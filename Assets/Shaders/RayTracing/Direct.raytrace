#pragma once
#pragma max_recursion_depth 1
#include "../Library/BRDF.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"

#define MAX_DIRECTIONAL_LIGHTS 4
int         _DirectionalLightCount;
float3      _DirectionalLightColors[MAX_DIRECTIONAL_LIGHTS];
float3      _DirectionalLightDirections[MAX_DIRECTIONAL_LIGHTS];

RaytracingAccelerationStructure _RaytracingAccelerationStructure : register(t0);
RWTexture2D<float4> _renderTarget;

Texture2D _albedoR;
Texture2D _normalM;
Texture2D _worldPos;
TextureCube _CubeMap;

SamplerState my_point_clamp_sampler;

uint _screenWidth;
uint _screenHeight;
uint _uGlobalFrames;

struct MyPayload
{
    float4 color;
};


[shader("anyhit")] // Add to hit group #0
void ShadowAnyHit(inout MyPayload pay, BuiltInTriangleIntersectionAttributes attrib) 
{
    pay.color.xyz = 0;
    pay.color.a = 0;
}

[shader("miss")]
void MyMissShader(inout MyPayload payload : SV_RayPayload)
{
    // float4(dispatchIdx.x & dispatchIdx.y, (dispatchIdx.x & 15)/15.0, (dispatchIdx.y & 15)/15.0, 0.0);
    payload.color.xyz = 0;
    payload.color.a = 1;
}


[shader("raygeneration")]
void ShadowDirectIllumination()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    float4 normalM = _normalM[dispatchIdx];
    if(normalM.x == 0 && normalM.y == 0 && normalM.z == 0)
    {
        return;
    }
    float3 worldPos = _worldPos[dispatchIdx].xyz;
    float3 wo = normalize(_WorldSpaceCameraPos.xyz - worldPos);
    float3 N = normalize(normalM.xyz * 2 - 1);

    float4 albedoR = _albedoR[dispatchIdx];
    
    Surface surface;
    surface.worldPos = worldPos.xyz;
    surface.normal = N;
    surface.color = albedoR.xyz;
    surface.alpha = 1;
    surface.roughness = albedoR.a;
    surface.metallic = normalM.a;
    
    MyPayload shadowPayLoad;
    shadowPayLoad.color = float4(0, 0, 0, 0);
    
    RayDesc shadowRay;
    float3 wLight = _DirectionalLightDirections[0].xyz;
    shadowRay.Origin = worldPos + N * 1e-3; 
    shadowRay.Direction = wLight;
    shadowRay.TMin = 0;
    shadowRay.TMax = 10000;

    TraceRay(_RaytracingAccelerationStructure, (RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH), 
    0xFF, 0, 1, 0, shadowRay, shadowPayLoad);
    
    float NdotL = max(0, dot(N, _DirectionalLightDirections[0].xyz));
    float3 BRDFCosTheta = _DirectionalLightColors[0] * BRDF_GGX_NoAlbedo(surface, wLight, wo) * NdotL;

    float3 V = shadowPayLoad.color.a * BRDFCosTheta;
    _renderTarget[dispatchIdx] = float4(V, 1);
}
