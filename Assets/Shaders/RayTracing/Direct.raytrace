#pragma max_recursion_depth 1
#include "RayTraceLighting.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"

RWTexture2D<float4> _renderTarget;

Texture2D _albedoR;
Texture2D _normalM;
Texture2D _worldPos;
Texture2D _emission;
TextureCube _CubeMap;

SamplerState my_point_clamp_sampler;

uint _screenWidth;
uint _screenHeight;
uint _uGlobalFrames;


[shader("anyhit")] // Add to hit group #0
void ShadowAnyHit(inout MyPayload pay, BuiltInTriangleIntersectionAttributes attrib) 
{
    pay.color.xyz = 0;
    pay.color.a = 0;
}

[shader("miss")]
void MyMissShader(inout MyPayload payload : SV_RayPayload)
{
    // float4(dispatchIdx.x & dispatchIdx.y, (dispatchIdx.x & 15)/15.0, (dispatchIdx.y & 15)/15.0, 0.0);
    payload.color.xyz = 0;
    payload.color.a = 1;
}

[shader("raygeneration")]
void ShadowDirectIllumination()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    float4 normalM = _normalM[dispatchIdx];
    if(normalM.x == 0 && normalM.y == 0 && normalM.z == 0)
    {
        return;
    }
    float3 worldPos = _worldPos[dispatchIdx].xyz;
    float3 wo = normalize(_WorldSpaceCameraPos.xyz - worldPos);
    float3 N = normalize(normalM.xyz * 2 - 1);
    float3 E = _emission[dispatchIdx].rgb;

    float4 albedoR = _albedoR[dispatchIdx];
    
    Surface surface;
    surface.worldPos = worldPos.xyz;
    surface.normal = N;
    surface.color = albedoR.xyz;
    surface.alpha = 1;
    surface.roughness = albedoR.a;
    surface.metallic = normalM.a;
    surface.emission = E;
    
    /*
    MyPayload shadowPayLoad;
    shadowPayLoad.color = float4(0, 0, 0, 0);
    shadowPayLoad.T = 10000;
    shadowPayLoad.N = 0;
    
    RayDesc shadowRay;
    float3 wLight = _DirectionalLightDirections[0].xyz;
    shadowRay.Origin = worldPos + N * 1e-3; 
    shadowRay.Direction = wLight;
    shadowRay.TMin = 0;
    shadowRay.TMax = 10000;

    TraceRay(_RaytracingAccelerationStructure, (RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH), 
    0xFF, 0, 1, 0, shadowRay, shadowPayLoad);
    
    float3 BRDFCosTheta = _DirectionalLightColors[0] * BRDFNoL_GGX_NoAlbedo(surface, wLight, wo);

    float3 V = shadowPayLoad.color.a * BRDFCosTheta;
    */
    
    uint seed = _uGlobalFrames * 3712231u + dispatchIdx.y * 2732u + dispatchIdx.x;
    float a = wang_hash(seed) / 4294967295.0;
    float b = wang_hash(seed) / 4294967295.0;
    _renderTarget[dispatchIdx] = float4(Direct_DirectionalLight(surface, wo) + Direct_AreaLight(surface, wo, seed), 1);
}
