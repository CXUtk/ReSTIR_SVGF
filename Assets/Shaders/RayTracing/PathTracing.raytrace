#pragma once
#pragma max_recursion_depth 2
#include "../Library/Utils.hlsl"
#include "SVGFStructure.hlsl"
#include "RayTraceLighting.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"

RWTexture2D<float4> _renderTarget;
RWStructuredBuffer<restir_RESERVOIR> _restirTemporalBuffer;

Texture2D _albedoR;
Texture2D _normalM;
Texture2D _worldPos;
TextureCube _CubeMap;

SamplerState my_point_clamp_sampler;

uint _screenWidth;
uint _screenHeight;
uint _uGlobalFrames;

uint wang_hash(inout uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

[shader("anyhit")] // Add to hit group #0
void ShadowAnyHit(inout MyPayload pay, BuiltInTriangleIntersectionAttributes attrib) 
{
    pay.color = 0;
}

[shader("miss")]
void MyMissShader(inout MyPayload payload : SV_RayPayload)
{
    payload.color.xyz = _CubeMap.SampleLevel(my_point_clamp_sampler, WorldRayDirection(), 0).xyz * 3;
    payload.color.a = 1;
    payload.N = -WorldRayDirection();
}


[shader("raygeneration")]
void MyRaygenShader_ReSTIR()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    
    uint seed = _uGlobalFrames * 2242231u + dispatchIdx.y * 1923u + dispatchIdx.x;
    float a = wang_hash(seed) / 4294967295.0;
    float b = wang_hash(seed) / 4294967295.0;
    
    int t = _uGlobalFrames % 16;
    int row = t / 4;
    int col = t % 4;
    
    a = 0.25 * row + a * 0.25;
    b = 0.25 * col + b * 0.25;

    float4 normalM = _normalM[dispatchIdx];
    float3 worldPos = _worldPos[dispatchIdx].xyz;
    float3 wo = normalize(_WorldSpaceCameraPos.xyz - worldPos);
    if(normalM.x == 0 && normalM.y == 0 && normalM.z == 0)
    {
        return;
    }
    float3 N = normalize(normalM.xyz * 2 - 1);

    float4 albedoR = _albedoR[dispatchIdx];
    
    Surface surface;
    surface.worldPos = worldPos.xyz;
    surface.normal = N;
    surface.color = albedoR.xyz;
    surface.alpha = 1;
    surface.roughness = albedoR.a;
    surface.metallic = normalM.a;

    float3 wi;
    float pdf;
    float3 brdfNoLDivPdf = GGXImportanceSample_NoAlbedo(float2(a, b), surface, wo, wi, pdf);
    
    RayDesc ray;
    ray.Origin = worldPos + N * 1e-3; 
    ray.Direction = wi;
    ray.TMin = 0;
    ray.TMax = 10000;

    MyPayload payload;
    payload.color = float4(0, 0, 0, 0);
    payload.T = 10000;
    payload.N = 0;

    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFFFFFFF, 0, 1, 0, ray, payload);

    // ------------------- ReSTIR process
    float3 Lo = payload.color;

    restir_RESERVOIR R;
    R.sample.Xv = worldPos;
    R.sample.Nv = N;
    R.sample.Xs = worldPos + N * 1e-3 + wi * payload.T;
    R.sample.Ns = payload.N; 
    R.sample.Lo = Lo;

    float pQ = Luminance(Lo) / pdf;
    R.w = pQ;
    R.M = 1;
    R.Wout = pQ / Luminance(Lo);
    
    uint seed2 = _uGlobalFrames * 7714523u + dispatchIdx.y * 7732u + dispatchIdx.x * 123;
    float p = wang_hash(seed2) / 4294967295.0;
    uint bufferId = dispatchIdx.y * _screenWidth + dispatchIdx.x;

    restir_RESERVOIR cur_sample = R;
    restir_RESERVOIR old_sample = _restirTemporalBuffer[bufferId];
    float w = cur_sample.w;
    RESERVOIR_update(old_sample, cur_sample.sample, w, p);
    old_sample.Wout = old_sample.w / (old_sample.M * Luminance(old_sample.sample.Lo));
    _restirTemporalBuffer[bufferId] = old_sample;

    // Lo = old_sample.sample.Lo * old_sample.Wout;

    // ------------------- ReSTIR process END

    // float3 WI = normalize(old_sample.sample.Xs - old_sample.sample.Xv);

    float3 newColor = _renderTarget[dispatchIdx] + Lo;
    
    if (isnan(newColor.x) || isnan(newColor.y) || isnan(newColor.z))
    {
        _renderTarget[dispatchIdx] = float4(1, 0, 1, 1);
        return;
    }
    
    _renderTarget[dispatchIdx] = float4(newColor, 1);
}



[shader("raygeneration")]
void MyRaygenShader()
{
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    
    uint seed = _uGlobalFrames * 2242231u + dispatchIdx.y * 1923u + dispatchIdx.x;
    float a = wang_hash(seed) / 4294967295.0;
    float b = wang_hash(seed) / 4294967295.0;

    float4 normalM = _normalM[dispatchIdx];
    float3 worldPos = _worldPos[dispatchIdx].xyz;
    float3 wo = normalize(_WorldSpaceCameraPos.xyz - worldPos);
    if(normalM.x == 0 && normalM.y == 0 && normalM.z == 0)
    {
        return;
    }
    float3 N = normalize(normalM.xyz * 2 - 1);

    float4 albedoR = _albedoR[dispatchIdx];
    
    Surface surface;
    surface.worldPos = worldPos.xyz;
    surface.normal = N;
    surface.color = albedoR.xyz;
    surface.alpha = 1;
    surface.roughness = albedoR.a;
    surface.metallic = normalM.a;
    surface.emission = 0;

    float3 wi;
    float pdf;
    float3 brdfNoLDivPdf = GGXImportanceSample_NoAlbedo(float2(a, b), surface, wo, wi, pdf);
    
    RayDesc ray;
    ray.Origin = worldPos + N * 1e-3; 
    ray.Direction = wi;
    ray.TMin = 0;
    ray.TMax = 10000;

    MyPayload payload;
    payload.color = float4(0, 0, 0, 0);
    payload.T = 10000;
    payload.N = 0;
    
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_NONE, 0xFFFFFFF, 0, 1, 0, ray, payload);

    float4 newColor = _renderTarget[dispatchIdx] + float4(brdfNoLDivPdf, 1) * payload.color;
    
    if (isnan(newColor.x) || isnan(newColor.y) || isnan(newColor.z))
    {
        _renderTarget[dispatchIdx] = float4(1, 1, 0, 1);
        return;
    }
    
    _renderTarget[dispatchIdx] = newColor;// * float4(surface.color, 1);
}