#include "SVGFStructure.hlsl"
#include "../Library/Utils.hlsl"

// Each #kernel tells which function to compile; you can have many kernels

// 0
#pragma kernel MainSVGFFilter

// 1
#pragma kernel VarianceEstimate

// 2
#pragma kernel VarianceTemporalAccumulation_Plus

// 3
#pragma kernel ClearTemporalBuffer

// 4
#pragma kernel Temporal_Reprojection

// 5
#pragma kernel ReSTIR_Clear

// 6
#pragma kernel ReSTIR_Copy

// 7
#pragma kernel ReSTIR_Temporal

// 8
#pragma kernel ReSTIR_Spatial


Texture2D<float4> _prevColorTarget;
Texture2D<float4> _curColorTarget;

Texture2D<float> _gdepth;
Texture2D<float4> _albedoR;
Texture2D<float4> _normalM;
Texture2D<float2> _motionVector;
Texture2D<float4> _worldPos;

Texture2D<float> _gdepth_prev;
Texture2D<float4> _albedoR_prev;
Texture2D<float4> _normalM_prev;
Texture2D<float2> _motionVector_prev;
Texture2D<float4> _worldPos_prev;

Texture2D<float4> _varianceTarget;

uint _screenWidth;
uint _screenHeight;

uint _uGlobalFrames;

float _temporalFactor;

int _filterLevel;
int _sigmaN;
float _sigmaZ;
float _sigmaC;
float _sigmaX;
int _useReSTIR;

Texture2D<float4> _varianceDataR;
Texture2D<float4> _renderR;
RWTexture2D<float4> _varianceDataW;
RWTexture2D<float4> _renderW;

static const float h[25] = {
    1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1.0 / 256.0,
    1.0 / 64.0, 1.0 / 16.0, 3.0 / 32.0, 1.0 / 16.0, 1.0 / 64.0,
    3.0 / 128.0, 3.0 / 32.0, 9.0 / 64.0, 3.0 / 32.0, 3.0 / 128.0,
    1.0 / 64.0, 1.0 / 16.0, 3.0 / 32.0, 1.0 / 16.0, 1.0 / 64.0,
    1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1.0 / 256.0
};

static const float gaussian[9] = {
    1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0,
    1.0 / 8.0, 1.0 / 4.0, 1.0 / 8.0,
    1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0
};

uint wang_hash(inout uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

[numthreads(16, 16, 1)]
void MainSVGFFilter(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }

    float3 N = _normalM[imageCoord].xyz;
    if (length(N) < 1e-5)
    {
        _renderW[imageCoord] = float4(0, 0, 0, 0);
        _varianceDataW[imageCoord] = float4(0, 0, 0, 0);
        return;
    }
    N = normalize(N * 2 - 1);

    const float3 colorSelf = _renderR[imageCoord].rgb;

    // posSelf.w is object Id
    float4 posSelf = _worldPos[imageCoord];
    
    float3 variance = 0;
    float variance_weight = 0;
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            int2 coord = imageCoord + int2(j, i);
            if (coord.x < 0 || coord.x >= _screenWidth || coord.y < 0 || coord.y >= _screenHeight) continue;
            float3 v = _varianceDataR[coord];

            int k = (1 + i) * 3 + (1 + j);
            float w = gaussian[k];
            variance += v * w;
            variance_weight += w;
        }
    }
    float3 stdev = sqrt(variance);
    if (variance_weight > 1e-5)
    {
        stdev = sqrt(variance / variance_weight);
    }

    float weight = h[2 * 5 + 2];
    float3 colorComponents = colorSelf * weight;
    float3 varianceComponents =  _varianceDataR[imageCoord] * weight * weight;
    int len = (1 << _filterLevel);
    for (int i = -2; i <= 2; i++)
    {
        for (int j = -2; j <= 2; j++)
        {
            if(i == 0 && j == 0) continue;
            int2 coord = imageCoord + int2(j * len, i * len);
            if (coord.x < 0 || coord.x >= _screenWidth || coord.y < 0 || coord.y >= _screenHeight) continue;
            float3 nq = _normalM[coord].xyz;
            // If is empty then skip
            if (length(nq) < 1e-5) continue;
            nq = normalize(nq * 2 - 1);

            float3 C = _renderR[coord].rgb;

            // Xq.w is object Id
            float4 Xq = _worldPos[coord];

            if (Xq.w != posSelf.w) continue;
            
            float3 dir = Xq.xyz - posSelf.xyz;
            if (length(dir) > 1e-5)
            {
                dir = normalize(dir);
            }

            float wn = pow(max(0, dot(nq, N)), _sigmaN);
            // float wz = exp(-abs(Z - Zq) / (_sigmaZ * abs(dot(gradZ, -offset)) + 1e-5));
            float wz = -dot(N, dir) * dot(N, dir) / _sigmaZ;
            float wc = -abs(dot(float3(0.2126, 0.7152, 0.0722), (C - colorSelf) / (_sigmaC * max(1e-4, stdev))));
            float wx = -length(Xq.xyz - posSelf.xyz) / _sigmaX;

            int k = (2 + i) * 5 + (2 + j);
            float w = h[k] * wn * exp(wz + wc + wx);
            float w2 = w * w;

            varianceComponents += w2 * _varianceDataR[coord];
            colorComponents += w * C;
            weight += w;
        }
    }
    if (weight < 1e-5)
    {
        _renderW[imageCoord] = float4(0, 0, 0, 1);
        _varianceDataW[imageCoord] = float4(0, 0, 0, 1);
        return;
    }
    _renderW[imageCoord] = float4(colorComponents / weight, 1);
    _varianceDataW[imageCoord] = float4(varianceComponents / (weight * weight), 1);
}

RWStructuredBuffer<temporal_data> _temporalBufferR;
RWStructuredBuffer<temporal_data> _temporalBufferW;

[numthreads(16, 16, 1)]
void VarianceEstimate(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    int bufferId = imageCoord.y * _screenWidth + imageCoord.x;
    
    float4 cur_WSpos = _worldPos[imageCoord];
    float3 cur_normalN = _normalM[imageCoord].xyz;
    
    if(length(cur_normalN) < 1e-5)
    {
        _renderW[imageCoord] = float4(0, 0, 0, 0);
        return;
    }
    float3 N = normalize(cur_normalN * 2 - 1);

    const temporal_data data = _temporalBufferR[bufferId];

    // If we have less than 4 samples
    if(data.count < 4)
    {
        float3 mean = 0;
        float3 mean2 = 0;
        float weight = 0;
        for (int i = -3; i <= 3; i++)
        {
            for (int j = -3; j <= 3; j++)
            {
                int2 coord = imageCoord + int2(j, i);
                if(coord.x < 0 || coord.x >= _screenWidth || coord.y < 0 || coord.y >= _screenHeight) continue;
                float3 nq = _normalM[coord].xyz;
                // If is empty then skip
                if(length(nq) < 1e-5) continue;
                nq = normalize(nq * 2 - 1);
                
                int bufferId2 = coord.y * _screenWidth + coord.x;
                
                float3 C = _temporalBufferR[bufferId2].mean;
                float3 C2 = _temporalBufferR[bufferId2].mean2;
        
                // Xq.w is object Id
                float4 Xq = _worldPos[coord];
                float3 dir = Xq.xyz - cur_WSpos.xyz;
                if (length(dir) > 1e-5)
                {
                    dir = normalize(dir);
                }
                float Lumin = abs(dot(float3(0.2126, 0.7152, 0.0722), C - data.mean));
                
                float wn = pow(max(0, dot(nq, N)), _sigmaN);
                // float wz = exp(-abs(Z - Zq) / (_sigmaZ * abs(dot(gradZ, -offset)) + 1e-5));
                float wz = -abs(dot(N, dir)) / _sigmaZ;
                float wx = -length(Xq.xyz - cur_WSpos.xyz) / _sigmaX;
                float wid = (Xq.w == cur_WSpos.w) ? 1 : 0;
                
                float w = wn * exp(wz + wx) * wid;
        
                mean += w * C;
                mean2 += w * C2;
                weight += w;
            }
        }
        if (weight < 1e-5)
        {
            _renderW[imageCoord] = float4(mean2 - mean * mean, 1);
            return;
        }
        float3 mean2W = mean2 / weight;
        float3 meanW = mean / weight;
        _renderW[imageCoord] = float4(abs(mean2W - meanW * meanW) * 4 / data.count, 1);
        return;
    }
    
    float3 mean = data.mean;
    float3 mean2 = data.mean2;
    _renderW[imageCoord] = float4(abs(mean2 - mean * mean), 1);
}


[numthreads(16, 16, 1)]
void VarianceTemporalAccumulation_Plus(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    int bufferId = imageCoord.y * _screenWidth + imageCoord.x;
    float2 uv = (imageCoord) / float2(_screenWidth, _screenHeight);

    float2 motion = _motionVector[imageCoord];
    float4 cur_color = _curColorTarget[imageCoord];
    float4 cur_WSpos = _worldPos[imageCoord];
    float3 cur_normalN = _normalM[imageCoord];
    float2 pixel_prev = (uv + motion) * float2(_screenWidth, _screenHeight);
    int2 imageCoord_prev = floor(pixel_prev);

    // Current is empty pixel
    if (length(cur_normalN) < 1e-5)
    {
        return;
    }
    float3 cur_N = normalize(cur_normalN * 2 - 1);
    
    // Compute bilinear filtering weights
    int2 offsets[4];
    offsets[0] = int2(0, 0);
    offsets[1] = int2(1, 0);
    offsets[2] = int2(0, 1);
    offsets[3] = int2(1, 1);

    float2 pix_fract = pixel_prev - imageCoord_prev;
    float2 inv_pix_fract = 1.0f - pix_fract;
    float weights[4];
    weights[0] = inv_pix_fract.x * inv_pix_fract.y;
    weights[1] = pix_fract.x * inv_pix_fract.y;
    weights[2] = inv_pix_fract.x * pix_fract.y;
    weights[3] = pix_fract.x * pix_fract.y;

    float sum_weights = 0;
    float3 sum_color = 0;
    float3 sum_mean2 = 0;
    float sum_spp = 0;
    for(int i = 0; i < 4; i++)
    {
        int2 uvQ = imageCoord_prev + offsets[i];
        if (uvQ.x < 0 || uvQ.x >= _screenWidth || uvQ.y < 0 || uvQ.y >= _screenHeight)
        {
            continue;
        }
        
        float3 prev_normalN = _normalM_prev[uvQ];
        if(length(prev_normalN) < 1e-5)
        {
            continue;
        }
        float3 prev_normal = normalize(prev_normalN * 2 - 1);
        const temporal_data prev = _temporalBufferR[uvQ.y * _screenWidth + uvQ.x];
        float4 prev_WSPos = _worldPos_prev[uvQ];
        float3 dir = prev_WSPos.xyz - cur_WSpos.xyz;
        if (length(dir) > 1e-5)
        {
            dir = normalize(dir);
        }
        if (cur_WSpos.w != prev_WSPos.w || dot(prev_normal, cur_N) < 0.5 || abs(dot(cur_N, dir)) > 0.1)
        {
            continue;
        }

        float wn = pow(max(0, dot(prev_normal, cur_N)), _sigmaN);
        float wc = -abs(dot(float3(0.2126, 0.7152, 0.0722), (cur_color - prev.mean) / (_sigmaC)));
        float w = weights[i] * wn * exp(wc);
        sum_color += prev.mean * w;
        sum_mean2 += prev.mean2 * w;
        sum_weights += w;
        sum_spp += w * prev.count;
    }

    if(sum_weights < 1e-5)
    {
        temporal_data data;
        data.mean = cur_color.rgb;
        data.mean2 = cur_color.rgb * cur_color.rgb;
        data.meanShort = cur_color.rgb;
        data.count = 1;
        _temporalBufferW[bufferId] = data;
    }
    else
    {
        float spp = sum_spp / sum_weights;
        float3 ss_color = sum_color / sum_weights;
        float3 ss_color2 = sum_mean2 / sum_weights;
        
        temporal_data data;
        // data.mean = prev.mean + cur.rgb;
        // data.mean2 = prev.mean2 + cur.rgb * cur.rgb;
        data.count = min(10, spp + 1);
        data.mean = lerp(ss_color, cur_color.rgb, max(1 / data.count, _temporalFactor));
        data.mean2 = lerp(ss_color2, cur_color.rgb * cur_color.rgb, max(1 / data.count, _temporalFactor));
        data.meanShort = 0;
        _temporalBufferW[bufferId] = data;
    }
}


[numthreads(16, 16, 1)]
void ClearTemporalBuffer(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    int bufferId = imageCoord.y * _screenWidth + imageCoord.x;
    
    temporal_data data;
    data.mean = 0;
    data.mean2 = 0;
    data.meanShort = 0;
    data.count = 0;

    _temporalBufferW[bufferId] = data;
}


[numthreads(16, 16, 1)]
void Temporal_Reprojection(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    float2 uv = (imageCoord) / float2(_screenWidth, _screenHeight);

    float2 motion = _motionVector[imageCoord];
    float2 pixel_prev = (uv + motion) * float2(_screenWidth, _screenHeight);
    int2 imageCoord_prev = floor(pixel_prev);
    
    float4 cur_color = _curColorTarget[imageCoord];
    float4 cur_WSpos = _worldPos[imageCoord];
    float3 cur_normalN = _normalM[imageCoord];
    

    if(_uGlobalFrames == 0)
    {
        _renderW[imageCoord] = float4(cur_color.rgb, 1);
        return;
    }
    
    // Current is empty pixel
    if(length(cur_normalN) < 1e-5)
    {
        _renderW[imageCoord] = float4(0, 0, 0, 1);
        return;
    }
    float3 cur_N = normalize(cur_normalN * 2 - 1);
    
    // Compute bilinear filtering weights
    int2 offsets[4];
    offsets[0] = int2(0, 0);
    offsets[1] = int2(1, 0);
    offsets[2] = int2(0, 1);
    offsets[3] = int2(1, 1);

    float2 pix_fract = pixel_prev - imageCoord_prev;
    float2 inv_pix_fract = 1.0f - pix_fract;
    float weights[4];
    weights[0] = inv_pix_fract.x * inv_pix_fract.y;
    weights[1] = pix_fract.x * inv_pix_fract.y;
    weights[2] = inv_pix_fract.x * pix_fract.y;
    weights[3] = pix_fract.x * pix_fract.y;

    float sum_weights = 0;
    float3 sum_color = 0;
    float sum_spp = 0;
    for(int i = 0; i < 4; i++)
    {
        int2 uvQ = imageCoord_prev + offsets[i];
        if (uvQ.x < 0 || uvQ.x >= _screenWidth || uvQ.y < 0 || uvQ.y >= _screenHeight)
        {
            continue;
        }
        
        float3 prev_normalN = _normalM_prev[uvQ];
        if(length(prev_normalN) < 1e-5)
        {
            continue;
        }
        float3 prev_normal = normalize(prev_normalN * 2 - 1);
        float4 prev_color = _prevColorTarget[uvQ];
        float4 prev_WSPos = _worldPos_prev[uvQ];

        float3 c = prev_color.rgb / prev_color.a;
        float3 dir = prev_WSPos.xyz - cur_WSpos.xyz;
        if (cur_WSpos.w != prev_WSPos.w || dot(prev_normal, cur_N) < 0.7 || abs(dot(cur_N, dir)) > 0.1)
        {
            continue;
        }

        sum_color += c * weights[i];
        sum_weights += weights[i];
        sum_spp += prev_color.a * weights[i];
    }

    if(sum_weights < 1e-5)
    {
        // If we could not find 2x2, try 3x3
        sum_color = 0;
        sum_weights = 0;
        sum_spp = 0;
        for (int i = -1; i <= 1; i++)
        {
            for (int j = -1; j <= 1; j++)
            {
                int2 coord = imageCoord_prev + int2(j, i);
                if (coord.x < 0 || coord.x >= _screenWidth || coord.y < 0 || coord.y >= _screenHeight) continue;
                float3 prev_normalN = _normalM_prev[coord];
                if(length(prev_normalN) < 1e-5)
                {
                    continue;
                }
                float3 prev_normal = normalize(prev_normalN * 2 - 1);
                float4 prev_color = _prevColorTarget[coord];
                float4 prev_WSPos = _worldPos_prev[coord];

                float3 dir = prev_WSPos.xyz - cur_WSpos.xyz;
                float3 c = prev_color.rgb / prev_color.a;
                if (cur_WSpos.w != prev_WSPos.w || dot(prev_normal, cur_N) < 0.7 || abs(dot(cur_N, dir)) > 0.1)
                {
                    continue;
                }

                sum_color += c;
                sum_weights += 1;
                sum_spp += prev_color.a;
            }
        }

        if(sum_weights > 0)
        {
            float spp = sum_spp / sum_weights;
            float3 ss_color = sum_color / sum_weights;
            float3 stdev = sqrt(_varianceTarget[imageCoord].rgb);
            // prev.xyz = clamp(prev.xyz, cur - variance, cur + variance);
        
            float sigma = abs(dot(float3(0.2126, 0.7152, 0.0722), (cur_color.rgb - ss_color) / max(1e-5, stdev)));
            float3 highThreshold = 0.1 + ss_color + stdev * 8;
            float3 overflow = max(0.0, cur_color.rgb - highThreshold);
            // ss_color = clamp(ss_color, cur_color.rgb - stdev * 2, cur_color.rgb + stdev * 2);
            cur_color.rgb -= overflow;
            
            if(sigma > 8)
            {
                spp = spp / 3;
            }
            spp = min(spp, 30);

            _renderW[imageCoord] = float4(ss_color * spp + cur_color.rgb, spp + 1);
            //_renderW[imageCoord] = float4(100, 0, 0, 100);
        }
        else
        {
            _renderW[imageCoord] = float4(cur_color.rgb, 1);
        }
        return;
    }

    float spp = sum_spp / sum_weights;
    float3 ss_color = sum_color / sum_weights;

    if(_useReSTIR == 0)
    {
        float3 stdev = sqrt(_varianceTarget[imageCoord].rgb);
        // prev.xyz = clamp(prev.xyz, cur - variance, cur + variance);
        
        float sigma = abs(dot(float3(0.2126, 0.7152, 0.0722), (cur_color.rgb - ss_color) / max(1e-5, stdev)));
        float3 highThreshold = 0.1 + ss_color + stdev * 5;
        float3 overflow = max(0.0, cur_color.rgb - highThreshold);
        cur_color.rgb -= overflow;
        //
        if(sigma > 8)
        {
            spp = spp / 3;
        }
        spp = min(spp, 30);
    }
    else
    {
        float3 stdev = sqrt(_varianceTarget[imageCoord].rgb);
        // prev.xyz = clamp(prev.xyz, cur - variance, cur + variance);
        
        float sigma = abs(dot(float3(0.2126, 0.7152, 0.0722), (cur_color.rgb - ss_color) / max(1e-5, stdev)));
        float3 highThreshold = 0.1 + ss_color + stdev;
        float3 overflow = max(0.0, cur_color.rgb - highThreshold);
        cur_color.rgb -= overflow;
        
        if(sigma > 1)
        {
            spp = spp / 8;
        }
        spp = min(spp, 10);
    }

    _renderW[imageCoord] = float4(ss_color * spp + cur_color.rgb, spp + 1);
}


StructuredBuffer<restir_RESERVOIR> _restirBuffer;
RWStructuredBuffer<restir_RESERVOIR> _restirBufferDest;

[numthreads(16, 16, 1)]
void ReSTIR_Clear(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    int bufferId = imageCoord.y * _screenWidth + imageCoord.x;
    _restirBufferDest[bufferId].sample.Xv = 0;
    _restirBufferDest[bufferId].sample.Nv = 0;
    _restirBufferDest[bufferId].sample.Ns = 0;
    _restirBufferDest[bufferId].sample.Xs = 0;
    _restirBufferDest[bufferId].M = 0;
    _restirBufferDest[bufferId].w = 0;
    _restirBufferDest[bufferId].Wout = 0;
}

[numthreads(16, 16, 1)]
void ReSTIR_Copy(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    int bufferId = imageCoord.y * _screenWidth + imageCoord.x;
    _restirBufferDest[bufferId] = _restirBuffer[bufferId];
}


[numthreads(16, 16, 1)]
void ReSTIR_Temporal(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    int bufferId = imageCoord.y * _screenWidth + imageCoord.x;
    uint seed = _uGlobalFrames * 7714523u + bufferId * 23u;
    float p = wang_hash(seed) / 4294967295.0;

    restir_RESERVOIR cur_sample = _restirBuffer[bufferId];
    restir_RESERVOIR old_sample = _restirBufferDest[bufferId];
    float w = cur_sample.w;
    RESERVOIR_update(old_sample, cur_sample.sample, w, p);
    old_sample.Wout = old_sample.w / (old_sample.M * Luminance(old_sample.sample.Lo));
    _restirBufferDest[bufferId] = old_sample;
}

[numthreads(16, 16, 1)]
void ReSTIR_Spatial(uint3 id : SV_DispatchThreadID)
{
    int2 imageCoord = id.xy;
    if (imageCoord.x >= _screenWidth || imageCoord.y >= _screenHeight)
    {
        return;
    }
    int bufferId = imageCoord.y * _screenWidth + imageCoord.x;
    uint seed = _uGlobalFrames * 7314523u + bufferId * 2u;

    float4 cur_WSpos = _worldPos[imageCoord];
    float3 cur_normalN = _normalM[imageCoord];
    // Current is empty pixel
    if(length(cur_normalN) < 1e-5)
    {
        return;
    }
    
    float3 cur_N = normalize(cur_normalN * 2 - 1);

    restir_RESERVOIR Q = _restirBuffer[bufferId];
    
    const int Radius = 5;
    int m_count = 0;
    for(int i = 0; i < 5; i++)
    {
        float x = wang_hash(seed) / 4294967295.0;
        float y = wang_hash(seed) / 4294967295.0;
    
        int dx = (x * 2 - 1) * Radius;
        int dy = (y * 2 - 1) * Radius;
    
        int2 coord = imageCoord + int2(dx, dy);
    
        if (coord.x < 0 || coord.x >= _screenWidth || coord.y < 0 || coord.y >= _screenHeight)
        {
            continue;
        }
    
        if(coord.x == imageCoord.x && coord.y == imageCoord.y)
        {
            continue;
        }
        
        float3 q_normalN = _normalM[coord];
        if(length(q_normalN) < 1e-5)
        {
            continue;
        }
        float3 q_normal = normalize(q_normalN * 2 - 1);
        float4 q_WSPos = _worldPos[coord];
        float3 dir = q_WSPos.xyz - cur_WSpos.xyz;
        if (length(cur_WSpos.xyz - q_WSPos.xyz) > 3 || dot(q_normal, cur_N) < 0.9 || abs(dot(cur_N, dir)) > 0.1)
        {
            continue;
        }
    
        int bufferId2 = coord.y * _screenWidth + coord.x;
        restir_RESERVOIR Rn = _restirBuffer[bufferId2];
    
        float3 Qdir = Rn.sample.Xs - Q.sample.Xv;
        float3 Rdir = Rn.sample.Xs - Rn.sample.Xv;
        
        float a = abs(dot(Q.sample.Ns, normalize(Qdir))) / abs(dot(Q.sample.Ns, normalize(Rdir)));
        float b = max(1e-5, dot(Rdir, Rdir) / dot(Qdir, Qdir));
        float J = a / b;
        
        float Pz = Luminance(Rn.sample.Lo) / J;
        Rn.sample.Xv = cur_WSpos.xyz;
        RESERVOIR_merge_spataial(Q, Rn, Pz,  wang_hash(seed) / 4294967295.0);
        m_count += Rn.M;
    }

    if(m_count > 0)
    {
        if(Luminance(Q.sample.Lo) > 0)
        {
            Q.Wout = Q.w / (m_count * Luminance(Q.sample.Lo));
        }
        else
        {
            Q.Wout = 0;
        }
    }
    _restirBufferDest[bufferId] = Q;
}